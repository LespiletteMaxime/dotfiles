# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi
if [ -f /etc/bash/bashrc ]; then
    . /etc/bash/bashrc
fi

# If not running interactively, don't do anything
if [[ $- != *i* ]] ; then
    # Shell is non-interactive.  Be done now!
    return
fi

# disable completion of hidden files
bind 'set match-hidden-files off'

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=5000
HISTTIMEFORMAT="%d/%m/%Y - %T : "

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# enable color support of ls
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    export LS_COLORS="di=00;34:ow=01;34:mi=00;35:ln=00;35:ex=00;31"
fi

# [[ $TMUX = "" ]] && [[ $TERM != "screen-256color" ]] && export TERM=xterm-256color

# User specific aliases
alias lx='ls -lXB'         #  Sort by extension.
alias lk='ls -lSr'         #  Sort by size, biggest last.
alias lt='ls -ltr'         #  Sort by date, most recent last.
alias lc='ls -ltcr'        #  Sort by/show change time,most recent last.
alias lu='ls -ltur'        #  Sort by/show access time,most recent last.

# The ubiquitous 'll': directories first, with alphanumeric sorting
alias ll="ls -lv --group-directories-first"
alias la='ll -A'           # Show hidden files
alias lr='ll -R'           # Recursive ls
alias tree='tree -Csuh'    #  Nice alternative to 'recursive ls' ...

alias rm='rm --interactive --verbose'
alias wget='wget -c'
alias mv='mv --interactive --verbose'
alias cp='cp --verbose --interactive'
alias grep='grep --color'

alias wgetcool='wget --limit-rate=200k'

# User specific functions

function bak() { cp "$1" "$1_`date +%Y-%m-%d_%H-%M-%S`" ; }
function bakto() {
    cp "$1" "$1_`date +%Y-%m-%d_%H-%M-%S`";
    mv "$1_`date +%Y-%m-%d_%H-%M-%S`" "$2";
}

# Find a file with a pattern in name:
function ff() { find . -type f -iname '*'"$*"'*' -ls ; }

#  Find a pattern in a set of files and highlight them:
#  (needs a recent version of egrep).
function fstr()
{
    OPTIND=1
    local mycase=""
    local usage="fstr: find string in files.
Usage: fstr [-i] \"pattern\" [\"filename pattern\"] "
    while getopts :it opt
    do
        case "$opt" in
           i) mycase="-i " ;;
           *) echo "$usage"; return ;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    if [ "$#" -lt 1 ]; then
        echo "$usage"
        return;
    fi
    find . -type f -name "${2:-*}" -print0 | \
xargs -0 egrep --color=always -sn ${case} "$1" 2>&- | more

}

function extract()      # Handy Extract Program
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

# Create a ZIP archive of a file or folder.
function makezip() { zip -r "${1%%/}.zip" "$1" ; }

# colored logs
function logview() { ccze -A < $1 | less -R ; }
alias logview="logview"
function logtail() { tail -f $1 | ccze -A; }
alias logtail="logtail"

# Function translating dmesg timestamp into a timestamp human readable
function dmesghr {
    # Define date format (similar to syslog)
    date_format="%b %d %T %Y"
 
    # Get the uptime in seconds from /proc/uptime
    uptime=$(cut -d " " -f 1 /proc/uptime)
 
    # Read dmesg and convert date with date_format defined above
    dmesg | sed "s/^\[[ ]*\?\([0-9.]*\)\] \(.*\)/\\1 \\2/" | while read timestamp message; do
        printf "[%s] %s\n" "$(date --date "now - $uptime seconds + $timestamp seconds" +"${date_format}")" "$message"
    done
}

# Configure favorite editor

if [ -x /usr/bin/gvim ]; then
    alias vi='gvim -v'
    alias vim='gvim -v'
fi

export EDITOR=/usr/bin/vim
export SVN_EDITOR=/usr/bin/vim
export GIT_EDITOR=/usr/bin/vim
export VISUAL=/usr/bin/vim

# set my minimalist prompt
red='\[\e[0;31m\]'      # Red
green='\[\e[0;32m\]'    # Green
blue='\[\e[0;34m\]'     # Bold Blue
boldred='\[\e[1;31m\]'  # Bold Red
reset='\[\e[0m\]'       # Text Reset

if [ "$USER" = "root" ] ; then
  # $bold$red
  PROMPT_USER_COLOR=$boldred 
  PROMPT_SYMBOL="#"
else
  PROMPT_USER_COLOR=$green
  PROMPT_SYMBOL="$"
fi

if [[ -n "$SSH_CLIENT$SSH2_CLIENT$SSH_TTY" ]] ; then
  PROMPT_SSH="@\h"
else
  PROMPT_SSH=""
fi

PS1="$PROMPT_USER_COLOR\u$PROMPT_SSH $blue\w$reset $PROMPT_SYMBOL "
export omg_ungit_prompt=${PS1}

# use liquid prompt if installed
if [ -f ~/.liquidprompt ]; then
  source ~/.liquidprompt
fi

# use 'Oh my GIT' if installed
if [ -f ~/.ohmygitprompt.sh ]; then
  source ~/.ohmygitprompt.sh

  VIRTUAL_ENV_DISABLE_PROMPT=true
  function omg_prompt_callback() {
    if [ -n "${VIRTUAL_ENV}" ]; then
        echo "\[$red\](`basename ${VIRTUAL_ENV}`)\[$reset\] "
    fi
  }
fi

# Python virtualenv 
export WORKON_HOME=~/.virtualenvs
if [ -f /usr/bin/virtualenvwrapper.sh ]; then
    source /usr/bin/virtualenvwrapper.sh
fi

# Use TheFuck (https://pypi.python.org/pypi/thefuck)
if [ -f /usr/local/bin/thefuck ]; then
  eval "$(thefuck --alias)"
fi
